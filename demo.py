#!/usr/bin/env python3
"""
Script de demostraci√≥n para GenPassw Pro
Este script muestra las principales funcionalidades de la aplicaci√≥n
"""

import os
import sys
import string
import random
from datetime import datetime

def print_banner():
    """Imprimir banner de bienvenida"""
    print("=" * 60)
    print("üîê GENPASSW PRO - DEMOSTRACI√ìN")
    print("=" * 60)
    print("Gestor de Contrase√±as Seguro y Moderno")
    print("=" * 60)

def generate_demo_password(length=16, include_uppercase=True, include_lowercase=True, 
                          include_numbers=True, include_symbols=True):
    """Generar contrase√±a de demostraci√≥n"""
    characters = ""
    if include_uppercase:
        characters += string.ascii_uppercase
    if include_lowercase:
        characters += string.ascii_lowercase
    if include_numbers:
        characters += string.digits
    if include_symbols:
        characters += "!@#$%^&*()_+-=[]{}|;:,.<>?"
    
    if not characters:
        characters = string.ascii_letters + string.digits
    
    # Asegurar que al menos hay un car√°cter de cada tipo seleccionado
    password = ""
    if include_uppercase:
        password += random.choice(string.ascii_uppercase)
    if include_lowercase:
        password += random.choice(string.ascii_lowercase)
    if include_numbers:
        password += random.choice(string.digits)
    if include_symbols:
        password += random.choice("!@#$%^&*()_+-=[]{}|;:,.<>?")
    
    # Completar el resto de la contrase√±a
    remaining_length = length - len(password)
    password += ''.join(random.choice(characters) for _ in range(remaining_length))
    
    # Mezclar la contrase√±a
    password_list = list(password)
    random.shuffle(password_list)
    return ''.join(password_list)

def validate_password_strength(password):
    """Validar la fortaleza de una contrase√±a"""
    checks = {
        'length': len(password) >= 8,
        'uppercase': any(c.isupper() for c in password),
        'lowercase': any(c.islower() for c in password),
        'numbers': any(c.isdigit() for c in password),
        'symbols': any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
    }
    
    score = sum(checks.values())
    
    if score <= 2:
        return "D√©bil", "üî¥"
    elif score <= 3:
        return "Media", "üü°"
    elif score <= 4:
        return "Fuerte", "üü¢"
    else:
        return "Muy Fuerte", "üü¢"

def demo_password_generation():
    """Demostrar generaci√≥n de contrase√±as"""
    print("\nüéØ DEMOSTRACI√ìN: Generaci√≥n de Contrase√±as")
    print("-" * 50)
    
    # Generar diferentes tipos de contrase√±as
    configs = [
        ("Contrase√±a b√°sica (8 caracteres)", 8, True, True, True, False),
        ("Contrase√±a est√°ndar (16 caracteres)", 16, True, True, True, True),
        ("Contrase√±a fuerte (32 caracteres)", 32, True, True, True, True),
        ("Contrase√±a solo n√∫meros (12 caracteres)", 12, False, False, True, False),
        ("Contrase√±a alfanum√©rica (20 caracteres)", 20, True, True, True, False)
    ]
    
    for name, length, upper, lower, numbers, symbols in configs:
        password = generate_demo_password(length, upper, lower, numbers, symbols)
        strength, icon = validate_password_strength(password)
        
        print(f"\n{name}:")
        print(f"  Contrase√±a: {password}")
        print(f"  Longitud: {len(password)} caracteres")
        print(f"  Fortaleza: {icon} {strength}")
        
        # Mostrar configuraci√≥n
        config_parts = []
        if upper: config_parts.append("May√∫sculas")
        if lower: config_parts.append("Min√∫sculas")
        if numbers: config_parts.append("N√∫meros")
        if symbols: config_parts.append("S√≠mbolos")
        print(f"  Configuraci√≥n: {', '.join(config_parts)}")

def demo_features():
    """Demostrar caracter√≠sticas principales"""
    print("\n‚ú® CARACTER√çSTICAS PRINCIPALES")
    print("-" * 50)
    
    features = [
        ("üîí Encriptaci√≥n AES-256", "Todas las contrase√±as se almacenan encriptadas"),
        ("üë§ Autenticaci√≥n de usuarios", "Sistema de login/registro seguro"),
        ("üîë Contrase√±a maestra", "Acceso protegido a todas las contrase√±as"),
        ("üìä Categorizaci√≥n", "Organiza contrase√±as por categor√≠as"),
        ("üîç B√∫squeda inteligente", "Busca por correo, sitio web o categor√≠a"),
        ("üì± Interfaz responsive", "Funciona en m√≥viles y tablets"),
        ("üíæ Exportaci√≥n", "Exporta en formato JSON y CSV"),
        ("üé® Dise√±o moderno", "Interfaz elegante con animaciones"),
        ("‚ö° Generaci√≥n r√°pida", "Contrase√±as seguras en tiempo real"),
        ("üõ°Ô∏è Validaci√≥n de fortaleza", "Indicador visual de seguridad")
    ]
    
    for feature, description in features:
        print(f"{feature}: {description}")

def demo_usage_instructions():
    """Mostrar instrucciones de uso"""
    print("\nüöÄ INSTRUCCIONES DE USO")
    print("-" * 50)
    
    steps = [
        ("1. Instalar dependencias", "pip install -r requirements.txt"),
        ("2. Ejecutar la aplicaci√≥n", "python run.py"),
        ("3. Abrir navegador", "http://localhost:5000"),
        ("4. Registrar cuenta", "Crear usuario y contrase√±a maestra"),
        ("5. Generar contrase√±as", "Usar el panel de generaci√≥n"),
        ("6. Guardar y gestionar", "Organizar por categor√≠as"),
        ("7. Exportar datos", "Backup en JSON o CSV")
    ]
    
    for step, command in steps:
        print(f"{step}: {command}")

def demo_security_features():
    """Demostrar caracter√≠sticas de seguridad"""
    print("\nüõ°Ô∏è CARACTER√çSTICAS DE SEGURIDAD")
    print("-" * 50)
    
    security_features = [
        "Encriptaci√≥n AES-256 para contrase√±as almacenadas",
        "Hashing bcrypt para contrase√±as de usuario",
        "Sesiones seguras con cookies encriptadas",
        "Protecci√≥n contra inyecci√≥n SQL",
        "Sanitizaci√≥n de inputs",
        "Validaci√≥n de tipos de datos",
        "Protecci√≥n CSRF",
        "Contrase√±as maestras separadas",
        "Claves de encriptaci√≥n √∫nicas por instalaci√≥n",
        "Logout autom√°tico por inactividad"
    ]
    
    for i, feature in enumerate(security_features, 1):
        print(f"{i}. {feature}")

def main():
    """Funci√≥n principal de demostraci√≥n"""
    print_banner()
    
    # Verificar si la aplicaci√≥n est√° instalada
    try:
        import flask
        import flask_sqlalchemy
        import cryptography
        print("‚úÖ Dependencias detectadas - Aplicaci√≥n lista para usar")
    except ImportError:
        print("‚ùå Dependencias no encontradas")
        print("Ejecuta: pip install -r requirements.txt")
        return
    
    # Ejecutar demostraciones
    demo_password_generation()
    demo_features()
    demo_security_features()
    demo_usage_instructions()
    
    print("\n" + "=" * 60)
    print("üéâ ¬°DEMOSTRACI√ìN COMPLETADA!")
    print("=" * 60)
    print("Para usar la aplicaci√≥n completa:")
    print("1. Ejecuta: python run.py")
    print("2. Abre: http://localhost:5000")
    print("3. ¬°Disfruta de GenPassw Pro!")
    print("=" * 60)

if __name__ == '__main__':
    main()
